# Install PGADMIN4 jail
# todo: switch to rc.d instead of rc.local
# some defaults:
PG_VER="15"													# install postgres${PG_VER}-client, grep ^PGSQL /usr/ports/Mk/bsd.default-versions.mk
PY_VERSION="3.11"												# use python ${PY_VERSION} by default, e.g: 3.11
#PY_VERSION="3.9"												# use python ${PY_VERSION} by default, e.g: 3.10
PYTHON_CMD="python${PY_VERSION}"										# default python interpreter: python${PY_VERSION}, e.g: python3.10
PIP_CMD="pip-${PY_VERSION}"											# default pip cmd: pip-${PY_VERSION}, e.g: pip-3.10
PY_PREFIX=$( echo ${PY_VERSION} | tr -d "." )									# py${PY_PREFIX}-<packages>, e.g: py39-openssl
PGADMIN4_WHL_URL="https://ftp.postgresql.org/pub/pgadmin/pgadmin4/v8.3/pip/pgadmin4-8.3-py3-none-any.whl"	# pip whl url/source
#PGADMIN4_WHL_URL="https://ftp.postgresql.org/pub/pgadmin/pgadmin4/v7.8/pip/pgadmin4-7.8-py3-none-any.whl"	# pip whl url/source

# pgadmin4 default credential
PGADMIN_SETUP_EMAIL="root@example.org"
PGADMIN_SETUP_PASSWORD="root"

quiet=1

jail_pgadmin4()
{
	ip4_addr="DHCP"
	host_hostname="${jname}.my.domain"
	pkg_bootstrap=1
	ver="native"

	# pyXX-wheel not direct deps, to mute
	# Using legacy 'setup.py install' for XXX, since package 'wheel' is not installed.
	pkglist="postgresql${PG_VER}-client rust"

	# cat packages | xargs whereis | cut -d : -f 2 |xargs
}

postcreate_pgadmin4()
{
	local _ip


	# execute cmd inside jail
	jexec <<EOF

export PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin:/root/bin
set -o errexit

echo "env BATCH=no make -C /usr/ports/lang/python311 install"
env BATCH=no make -C /usr/ports/lang/python311 install

for i in /usr/ports/devel/py-wheel /usr/ports/devel/py-virtualenv /usr/ports/devel/py-pip /usr/ports/sysutils/py-psutil /usr/ports/www/py-flask /usr/ports/www/py-flask-login /usr/ports/mail/py-flask-mail /usr/ports/www/py-flask-socketio /usr/ports/devel/py-flask-babel /usr/ports/www/py-flask-security /usr/ports/devel/py-dateutil /usr/ports/mail/py-email-validator /usr/ports/www/py-flask-migrate /usr/ports/security/py-cryptography /usr/ports/devel/py-pyasn1 /usr/ports/www/py-werkzeug /usr/ports/net/py-ndg-httpsclient /usr/ports/databases/py-sqlite3 /usr/ports/graphics/py-pillow /usr/ports/dns/py-dnspython /usr/ports/security/py-bcrypt /usr/ports/databases/py-psycopg /usr/ports/security/py-keyring; do
	env BATCH=no make -C \${i} clean
	env BATCH=no make -C \${i}
	env BATCH=no make -C \${i} deinstall || true
	env BATCH=no make -C \${i} install
	env BATCH=no make -C \${i} clean
done

# test for python installed
if [ ! -x /usr/local/bin/${PYTHON_CMD} ]; then
	echo "no such python"
	exit 1
fi
if [ ! -x /usr/local/bin/${PIP_CMD} ]; then
	echo "no such pip"
	exit 1
fi

ln -sf /usr/local/bin/${PYTHON_CMD} /usr/local/bin/python
ln -sf /usr/local/bin/${PIP_CMD} /usr/local/bin/pip
# https://github.com/pgadmin-org/pgadmin4/blob/master/requirements.txt
cat > /tmp/req.txt <<XEOF
Flask==2.3.*; python_version > '3.7'
Flask==2.2.*; python_version <= '3.7'
Flask-Gravatar==0.*
Flask-Login==0.*
Flask-Mail==0.*
Flask-Migrate==4.*
greenlet==1.1.2;  python_version <= '3.10'
Flask-SQLAlchemy==3.1.*; python_version > '3.7'
Flask-SQLAlchemy==3.0.*; python_version <= '3.7'
Flask-WTF==1.2.*; python_version > '3.7'
Flask-WTF==1.1.1; python_version <= '3.7'
Flask-Compress==1.*
Flask-Paranoid==0.*
Flask-Babel==4.0.*; python_version > '3.7'
Flask-Babel==3.1.*; python_version <= '3.7'
Flask-Security-Too==5.3.*; python_version > '3.7'
Flask-Security-Too==5.1.*; python_version <= '3.7'
Flask-SocketIO==5.3.*
WTForms==3.1.*; python_version > '3.7'
WTForms==3.0.*; python_version <= '3.7'
passlib==1.*
pytz==2023.*
speaklater3==1.*
sqlparse==0.*
psutil==5.9.*
psycopg[c]==3.1.12
python-dateutil==2.*
SQLAlchemy==2.*
bcrypt==4.0.*
cryptography==42.0.*
sshtunnel==0.*
ldap3==2.*
gssapi==1.8.*
eventlet==0.34.2
httpagentparser==1.9.*
user-agents==2.2.0
pywinpty==2.0.*; sys_platform=="win32"
Authlib==1.2.*
pyotp==2.*
qrcode==7.*
boto3==1.33.*
urllib3==1.26.*
azure-mgmt-rdbms==10.1.0
azure-mgmt-resource==23.0.1
azure-mgmt-subscription==3.1.1
azure-identity==1.15.0
google-api-python-client==2.*
google-auth-oauthlib==1.1.0
keyring==24.*; python_version > '3.7'
keyring==23.*; python_version <= '3.7'
Werkzeug==2.3.*; python_version > '3.7'
Werkzeug==2.2.3; python_version <= '3.7'
typer[all]==0.9.*
setuptools==69.*; python_version >= '3.12'
jsonformatter~=0.3.2
XEOF


/usr/local/bin/pip install -r /tmp/req.txt || true
/usr/local/bin/pip install eventlet
/usr/local/bin/pip install flask_paranoid
# get latest
#pkg remove -f -y py${PY_PREFIX}-openssl \
/usr/local/bin/pip install pyopenssl
/usr/local/bin/pip install -r /tmp/req.txt || true
/usr/local/bin/pip install ${PGADMIN4_WHL_URL} || true
/usr/local/bin/pip install --no-dependencies ${PGADMIN4_WHL_URL} 
sed 's:127.0.0.1:0.0.0.0:g' /usr/local/lib/python${PY_VERSION}/site-packages/pgadmin4/config.py > /usr/local/lib/python${PY_VERSION}/site-packages/pgadmin4/config_local.py

# Trio kqueue support(?)
rm -f /usr/local/lib/python3.11/site-packages/httpcore/_backends/trio.py
pip uninstall -y trio

pkg remove -y rust || true
mkdir -p /var/lib/pgadmin

set +o errexit
[ ! -d /var/lib/pgadmin ] && mkdir -p /var/lib/pgadmin
[ -r /var/lib/pgadmin/pgadmin4.db ] && rm -f /var/lib/pgadmin/pgadmin4.db
[ ! -d /usr/local/etc/rc.d ] && mkdir -p /usr/local/etc/rc.d
exit 0
EOF

	sed "s:%%PY_VERSION%%:${PY_VERSION}:g" files/pgadmin4.tpl > files/pgadmin4
	chown root:wheel files/pgadmin4
	chmod 0555 files/pgadmin4
	jscp files/pgadmin4 ${jname}:/usr/local/etc/rc.d/
	rm -f files/pgadmin4

	# turn off unnecessary services
	sysrc \
		syslogd_enable="NO" \
		syslogd_flags="-ss -c" \
		cron_enable="NO" \
		sendmail_enable="NO" \
		sendmail_submit_enable="NO" \
		sendmail_outbound_enable="NO" \
		sendmail_msp_queue_enable="NO" \
		pgadmin4_enable="YES"

	service mode=action pgadmin4 start || true
	echo "waiting for service..."
	sleep 10		# waiting for service ready

	_ip=$( jget jname=${jname} mode=quiet ip4_addr )

	# postmessage
	cat <<EOF
	${jname} url          : http://${_ip}:5050
	${jname} default email: ${PGADMIN_SETUP_EMAIL}
	${jname} default pass : ${PGADMIN_SETUP_PASSWORD}
EOF
}
