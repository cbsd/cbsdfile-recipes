# Uncommend CLOUD_\* vars ro work remote API provider
# See https://www.bsdstore.ru/en/cbsdfile.html for details
#CLOUD_URL="https://us-sw.api.my.domain"
#CLOUD_KEY="ssh-ed25519 XXX your@comment"

# Customize gitlab options
# use alternative ssh port, e.g: 2233
# default:
# GITLAB_SSH_PORT=22
GITLAB_SSH_PORT=2233

# use CBSD expose to forward SSH traffic? Useful when GITLAB_SSH_PORT != 22
# By default: disabled ( GITLAB_SSH_EXPOSE=1 )
# default:
# GITLAB_SSH_EXPOSE=0
GITLAB_SSH_EXPOSE=1

quiet=0

# PW source: pwgen as dependencies:
#PWGEN_CMD=$( which pwgen )
#[ ! -x "${PWGEN_CMD}" ] && err 1 "${W1_COLOR}error: ${N1_COLOR}no such executables: ${N2_COLOR}pwgen${N0_COLOR}"

jail_gitlab()
{
	#auto IP
	#ipv4_addr="DHCP,DHCPv6"
	ipv4_addr="DHCP"
	# for fixed address, or overwrite via args: 'cbsd up ip4_addr="1.1.1.1"`:
	#ip4_addr="192.168.0.1"

	# set interface=0 when IP not manage by CBSD
	interface="auto"

	astart=0

	# PgSQL req:
	allow_sysvipc=1
	allow_raw_sockets=1
	host_hostname="${jname}.convectix.com"
	pkg_bootstrap="1"
	pkglist="python security/ca_root_nss"
}

postcreate_gitlab()
{
	local _ip

	# for expose
	if [ ${GITLAB_SSH_EXPOSE} -eq 1 ]; then
		#expose mode=add in=10080 out=80
		expose mode=add in=${GITLAB_SSH_PORT} out=22
	fi

	# cbsd sysrc
	sysrc \
		syslogd_flags="-ss" \
		sendmail_enable="NO" \
		sendmail_submit_enable="NO" \
		sendmail_outbound_enable="NO" \
		sendmail_msp_queue_enable="NO" \
		cron_enable="NO" \
		sshd_enable="YES" \
		sshd_flags="-oUseDNS=no" \
		gitlab_enable="YES" \
		postgresql_enable="YES" \
		nginx_enable="YES" \
		redis_enable="YES"

	# some secrets
	#DB_PASSWORD=`${PWGEN_CMD} -cnyB1 -r \\&\\"\\\\\\\\/ 32`
	# turn off trace when work with passwords
	set +o xtrace
	#DB_PASSWORD=$( ${HEAD_CMD} -c 30 /dev/random | ${UUENCODE_CMD} -m - | ${TAIL_CMD} -n 2 | ${HEAD_CMD} -n1 )

	# use CBSD function to generate random password, length=30
	DB_PASSWORD=$( random_password_gen -l 30 )

	# cbsd jexec
	jexec <<EOF
echo "127.0.0.1:5432:gitlabhq_production:git:${DB_PASSWORD}" > /root/.pgpass
chmod 0600 /root/.pgpass
EOF
	echo
	${ECHO} "${H3_COLOR}Postgres git user password saved in: ${N2_COLOR}${data}/root/.pgpass${N0_COLOR}"
	echo
	set -o xtrace

	# Make own pkg repository available and disable FreeBSD ones
	jexec mkdir -p /usr/local/etc/pkg/repos
	jscp files/FreeBSD.conf ${jname}:/usr/local/etc/pkg/repos/FreeBSD.conf
	jexec chown root:wheel /usr/local/etc/pkg/repos/FreeBSD.conf
	jexec chmod 0644 /usr/local/etc/pkg/repos/FreeBSD.conf

	# Install required packages
	pkg mode=update
	pkg mode=install git postgresql12-contrib postgresql12-server gitlab-ce nginx
	# Postgresql setup
	service mode=action postgresql initdb

	# Allow full access to DB
	# TODO this needs to be fixed to be more secure
	jexec <<EOF
echo "host    all             all             0.0.0.0/0               trust" >> /var/db/postgres/data12/pg_hba.conf
EOF

	# Start postgres
	service mode=action jname=${jname} postgresql start

	# Setup postgresql database
	jexec <<EOF
psql -d template1 -U postgres -c "CREATE USER git CREATEDB SUPERUSER;"
psql -d template1 -U postgres -c "CREATE DATABASE gitlabhq_production OWNER git;"
psql -U postgres -d gitlabhq_production -c "CREATE EXTENSION IF NOT EXISTS pg_trgm;"
psql -U postgres -d gitlabhq_production -c "CREATE EXTENSION IF NOT EXISTS btree_gist;"
EOF

	# Redis socket configuration
	jexec <<EOF
echo "unixsocket /var/run/redis/redis.sock" >> /usr/local/etc/redis.conf
echo "unixsocketperm 770" >> /usr/local/etc/redis.conf
EOF

	# Start redis
	service mode=action redis start

	# Create GIT repository
	jexec mkdir -p /usr/local/git/repositories
	jexec chown git:git /usr/local/git/repositories
	jexec chmod 2770 /usr/local/git/repositories

	# Add user git to redis group
	jexec pw groupmod redis -m git

	# Copy nginx config
	jscp files/nginx.conf ${jname}:/usr/local/etc/nginx/nginx.conf
	jexec chown root:wheel /usr/local/etc/nginx/nginx.conf
	jexec chmod 0644 /usr/local/etc/nginx/nginx.conf

	# Configure gitconfig
	jexec <<EOF
su -l git -c "git config --global core.autocrlf input"
su -l git -c "git config --global gc.auto 0"
su -l git -c "git config --global repack.writeBitmaps true"
su -l git -c "git config --global receive.advertisePushOptions true"
su -l git -c "git config --global core.fsyncObjectFiles true"
# Make sure .ssh directory exists
su -l git -c "mkdir -p /usr/local/git/.ssh"
EOF

	if [ "${GITLAB_SSH_PORT}" != "22" ]; then
		jexec <<EOF
su -l git -c "mkdir -p /usr/local/git/.ssh"
cat > /usr/local/git/.ssh/config <<JEOF
host ${host_hostname}
	user git
	port ${GITLAB_SSH_PORT}
	hostname 127.0.0.1
JEOF
chown git:git /usr/local/git/.ssh/config
${ECHO} "${N1_COLOR}non-standart ssh port saved in: ${N2_COLOR}/usr/local/git/.ssh/config${N0_COLOR}"
EOF
	fi
	# Copy local ssh config
	#jscp files/sshconfig ${jname}:/usr/local/git/.ssh/config
	#jexec jname=${jname} chown git:git /usr/local/git/.ssh/config
	#jexec jname=${jname} chmod 0600 /usr/local/git/.ssh/config

	# Create .gitlab_shell_secret symlink
	jexec ln -s /usr/local/www/gitlab-ce/.gitlab_shell_secret /usr/local/share/gitlab-shell/.gitlab_shell_secret

	# Set db password
	#jexec <<EOF
#sed -i '' -e 's/\s\spassword: "secure password"/  password: "${DB_PASSWORD}"/g' /usr/local/www/gitlab-ce/config/database.yml
#EOF

	# Run Gitlab setup
	jexec <<EOF
yes yes | su -l git -c "cd /usr/local/www/gitlab-ce && rake gitlab:setup RAILS_ENV=production"
EOF

	# Update config files
	jexec <<EOF
# Replace host with our IP
#sed -i '' -e 's/^.*host: localhost$/    host: 192.168.0.251/g' /usr/local/www/gitlab-ce/config/gitlab.yml
sed -i '' -e "s/^.*host: localhost$/    host: ${ip4_addr}/g" /usr/local/www/gitlab-ce/config/gitlab.yml
# Replace port for gitlab web interface
sed -i '' -e 's/^.*port: 80 .*$/    port: 10080/g' /usr/local/www/gitlab-ce/config/gitlab.yml
# gitlab ssh config
#sed -i '' -e 's/^.*ssh_port: 22$/    ssh_port: 2223/g' /usr/local/www/gitlab-ce/config/gitlab.yml
# NGINX config
cp -a /usr/local/www/gitlab-ce/lib/support/nginx/gitlab /usr/local/www/gitlab-ce/lib/support/nginx/gitlab.bak
sed -i '' -e "s/^.*listen \\\[::\\\]/  # listen [::]:80 default_server;;/g" /usr/local/www/gitlab-ce/lib/support/nginx/gitlab
#sed -i '' -e 's/^.*listen \[::\]:80 default_server;$//g' /usr/local/www/gitlab-ce/lib/support/nginx/gitlab
EOF

	# Install and Compile assets
	jexec <<EOF
su -l git -c "cd /usr/local/www/gitlab-ce && yarn install --production --pure-lockfile"
su -l git -c "cd /usr/local/www/gitlab-ce && RAILS_ENV=production NODE_ENV=production USE_DB=false SKIP_STORAGE_VALIDATION=true NODE_OPTIONS='--max_old_space_size=3584' bundle exec rake gitlab:assets:compile"
EOF

	# Start ssh
	service mode=action sshd start

	# Start nginx
	service mode=action nginx start

	# Start gitlab
	service mode=action gitlab start

	set +o xtrace
	# postmessage
	_ip=$( jget jname=${jname} mode=quiet ip4_addr )
	set +o errexit  # retcode for iptype

	OIFS="${IFS}"
	IFS=","
	for i in ${_ip}; do
		IFS="${OIFS}"
		myip=
		iptype ${i}
		case $? in
			1)
				# ipv4, no cast
				myip="${i}"
				;;
			2)
				# ipv6, add brackets
				myip="[${i}]"
				;;
			*)
				# unknown IP type
				continue
				;;
		esac

		cat <<EOF
        ${jname} url          : http://${myip}
EOF
		IFS=","
	done
	IFS="${OIFS}"

	if [ "${GITLAB_SSH_PORT}" != "22" ]; then
		${ECHO} "  ${N1_COLOR}hint: You may want to use the configuration for an alternative port${N0_COLOR}"
		${CAT_CMD} <<EOF
host ${host_hostname}
	user git
	port ${GITLAB_SSH_PORT}
EOF
	fi

	set -o errexit
}
