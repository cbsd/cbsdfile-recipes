# use 'cbsd up <param>=<val>' to overwrite default jail settings, e.g:
# env GITLAB_HTTP_PORT=8080 cbsd up ip4_addr=46.4.100.29,2a01:4f8:140:918b::1 ver=13.0 astart=1

### Global settings
# Initial root password for UI
[ -z "${GITLAB_ROOT_PASSWORD}" ] && GITLAB_ROOT_PASSWORD="yourpassword"
# GitLab external FQDN. Leave '0' for disable ( http://IP access )
[ -z "${EXTERNAL_URL}" ] && EXTERNAL_URL=0

### Postgresql settings
# GitLab root password:
# Default Postgresql version
# FreeBSD defaults: 'grep ^PGSQL_DEFAULT /usr/ports/Mk/bsd.default-versions.mk'
[ -z "${GITLAB_PG_VER}" ] && GITLAB_PG_VER="15"

### Nginx settings
# Default nginx port for http:// in jail:
[ -z "${GITLAB_HTTP_PORT}" ] && GITLAB_HTTP_PORT=80

# Default nginx port for https:// in jail:
[ -z "${GITLAB_HTTPS_PORT}" ] && GITLAB_HTTPS_PORT=0		# 0 - disabled

# Use 'cbsd expose' to forward HTTP traffic from CBSD $nodeip ?
# By default: '0' - disabled
# Use any positive values 1-65534 as 'in=' port for 'cbsd expose':
# 'cbsd expose in=GITLAB_HTTP_EXPOSE out=GITLAB_HTTP_PORT'
[ -z "${GITLAB_HTTP_EXPOSE}" ] && GITLAB_HTTP_EXPOSE=0

# Use 'cbsd expose' to forward HTTPS traffic from CBSD $nodeip ?
# By default: '0' - disabled
# Use any positive values 1-65534 as 'in=' port for 'cbsd expose':
# 'cbsd expose in=GITLAB_HTTPS_EXPOSE out=GITLAB_HTTPS_PORT'
[ -z "${GITLAB_HTTPS_EXPOSE}" ] && GITLAB_HTTPS_EXPOSE=0


### SSH settings
# Default SSHD port in jail:
[ -z "${GITLAB_SSH_PORT}" ] && GITLAB_SSH_PORT="22"

# Use 'cbsd expose' to forward SSH traffic from CBSD $nodeip ?
# By default: '0' - disabled
# Use any positive values 1-65534 as 'in=' port for 'cbsd expose':
# 'cbsd expose in=GITLAB_SSH_EXPOSE out=GITLAB_SSH_PORT'
[ -z "${GITLAB_SSH_EXPOSE}" ] && GITLAB_SSH_EXPOSE=0


### MISC settings
# UPFILE_DESTROY_FAILED - set to "0" to prevent the jail from being destroyed even if the test fails.
[ -z "${UPFILE_DESTROY_FAILED}" ] && UPFILE_DESTROY_FAILED=1

# global vars - installation or update? Don't touch.
IS_UPGRADE=0

# global preup function
preup()
{
	local _pwlen=0 _kern_maxfilesperproc=

	# check for maxopenfiles/perproc:
	# yarn buld requirered more thean default 1000 files:
	# 
	# [webpack-cli] [Error: EMFILE: too many open files, open '/usr/local/www/gitlab-ce/node_modules/.cache/compression-webpack-plugin/tmp/d655487c'] {
	#  errno: -24,
	#  code: 'EMFILE',
	#  syscall: 'open',
	#  path: '/usr/local/www/gitlab-ce/node_modules/.cache/compression-webpack-plugin/tmp/d655487c'
	#}
	# error Command failed with exit code 2.

	_kern_maxfilesperproc=$( ${SYSCTL_CMD} -qn kern.maxfilesperproc 2>/dev/null )

	if [ -n "${_kern_maxfilesperproc}" ]; then
		[ ${_kern_maxfilesperproc} -lt 2048 ] && err 1 "${N1_COLOR}yarn webpack build requires a large number of open files for build. Please set kern.maxfilesperproc sysctl value to 2048 or more, e.g.: ${N2_COLOR}/sbin/sysctl -w kern.maxfilesperproc=2048${N0_COLOR}"
	fi

	_pwlen=$( strlen "${GITLAB_ROOT_PASSWORD}" )
	[ ${_pwlen} -lt 8 ] && err 1 "${N1_COLOR}Password too small, ${W1_COLOR}8${N1_COLOR} characters minimum: ${N2_COLOR}${GITLAB_ROOT_PASSWORD}${N0_COLOR}"
}


jail_gitlab()
{
	# auto IPv4 by default
	ipv4_addr="DHCP"
	# for fixed address, or overwrite via args: 'cbsd up ip4_addr="1.1.1.1"`:

	# set interface=0 when IP not manage by CBSD
	interface="auto"

	# jail autostart on boot?
	astart=0

	# PgSQL req:
	allow_sysvipc=1
	allow_raw_sockets=1

	# for external ZFS mount
	allow_zfs=1

	host_hostname="${jname}.idefix.lan"
	pkg_bootstrap="1"
	pkglist="security/ca_root_nss databases/postgresql${GITLAB_PG_VER}-contrib databases/postgresql${GITLAB_PG_VER}-server www/nginx www/gitlab-ce"
}

# PostgresQL init function
configure_postgresql()
{

	DB_PASSWORD=$( random_password_gen -l 30 )
	# create DB dir and set owner/perms (external volume always mount as root:wheel)
	# store init time and password in cbsdfile signature
	jexec <<EOF
[ ! -d /var/db/postgres ] && mkdir /var/db/postgres
chown postgres:postgres /var/db/postgres
EOF

	# check for previous installation signature
	if [ -r ${path}/var/db/postgres/cbsdfile.conf ]; then
		. ${path}/var/db/postgres/cbsdfile.conf
	else
		# first time setup
		echo "DB_PASSWORD=\"${DB_PASSWORD}\"" > ${path}/var/db/postgres/cbsdfile.conf
		echo "INIT_TIME=\"${INIT_TIME}\"" >> ${path}/var/db/postgres/cbsdfile.conf
		echo "IS_UPGRADE=\"1\"" >> ${path}/var/db/postgres/cbsdfile.conf
	fi

	if [ ${IS_UPGRADE} -eq 1 ]; then
		printf "${N1_COLOR}Postgresql DB already initialized on: ${N2_COLOR}"
		${ECHO} "${INIT_TIME}"
		${ECHO} "${N0_COLOR}"
	else
		${ECHO} "${N1_COLOR}First time setup${N2_COLOR}"
	fi

	# cbsd jexec
	jexec <<EOF
echo "127.0.0.1:5432:gitlabhq_production:git:${DB_PASSWORD}" > /root/.pgpass
echo "::1:5432:gitlabhq_production:git:${DB_PASSWORD}" >> /root/.pgpass
chmod 0600 /root/.pgpass
EOF

	echo
	${ECHO} "${H3_COLOR}Postgres git user password saved in: ${N2_COLOR}${data}/root/.pgpass${N0_COLOR}"
	echo
	set -o xtrace

	if [ ${IS_UPGRADE} -eq 0 ]; then

		# Postgresql setup
		service mode=action postgresql initdb

		# Password auth for DB
		jexec <<EOF
echo "host    all             all             0.0.0.0/0               md5" >> /var/db/postgres/data${GITLAB_PG_VER}/pg_hba.conf
echo "host    all             all             ::/0                    md5" >> /var/db/postgres/data${GITLAB_PG_VER}/pg_hba.conf
EOF
	fi

	# Start postgres
	service mode=action jname=${jname} postgresql start
	sleep 2
}


configure_postgresql_cred()
{
	if [ ${IS_UPGRADE} -eq 0 ]; then
		# for new setup
		jexec <<EOF
# create user git
psql -d template1 -U postgres -c "CREATE USER git WITH PASSWORD '${DB_PASSWORD}'"
psql -d template1 -U postgres -c "ALTER USER git WITH SUPERUSER;"
psql -d template1 -U postgres -c "ALTER USER git WITH CREATEDB;"
EOF
	fi

	jexec <<EOF
# Create the GitLab production database & grant all privileges on database
psql -d template1 -U postgres -c "CREATE DATABASE gitlabhq_production OWNER git;"

# Connect as superuser to gitlab db and enable pg_trgm extension if not installed
psql -U postgres -d gitlabhq_production -c "CREATE EXTENSION IF NOT EXISTS pg_trgm;"
psql -U postgres -d gitlabhq_production -c "CREATE EXTENSION IF NOT EXISTS btree_gist;"
EOF
}

configure_redis()
{
	jexec <<EOF
# Add git user to redis group
pw groupmod redis -m git
chown root:wheel /usr/local/etc/redis.conf

service redis restart
EOF
}


configure_gitlab()
{
	# Set db password
	jexec <<EOF
sed -i '' -e 's#"secure password"#"${DB_PASSWORD}"#g' /usr/local/www/gitlab-ce/config/database.yml
EOF

#	# 4. GitLab
#	# Configure It
	jexec <<EOF
# You need to be root user

# Go to GitLab installation folder
cd /usr/local/www/gitlab-ce

# Update GitLab config file, follow the directions at the top of the file
#vi config/gitlab.yml
#
## Put a secret into maybe with: head /dev/urandom | tr -dc A-Za-z0-9 | head -c64
#vi config/secrets.yml
#
## Find number of cores
#sysctl hw.ncpu
#
# Enable cluster mode if you expect to have a high load instance
# Ex. change amount of workers to 3 for 2GB RAM server
# Set the number of workers to at least the number of cores
#vi config/puma.rb

# Configure Git global settings for git user
# 'autocrlf' is needed for the web editor
su -l git -c "git config --global core.autocrlf input"

# Disable 'git gc --auto' because GitLab already runs 'git gc' when needed
su -l git -c "git config --global gc.auto 0"

# Enable packfile bitmaps
su -l git -c "git config --global repack.writeBitmaps true"

# Enable push options
su -l git -c "git config --global receive.advertisePushOptions true"

# Enable fsyncObjectFiles to reduce risk of repository corruption if the server crashes
su -l git -c "git config --global core.fsync objects,derived-metadata,reference"

# Make sure .ssh directory exists
su -l git -c "mkdir -m 0700 -p /usr/local/git/.ssh"

# Make sure repositories directory exists with correct permissions
[ ! -d /usr/local/git/repositories ] && mkdir /usr/local/git/repositories
chown git:git /usr/local/git/repositories
chmod 2770 /usr/local/git/repositories
EOF

	#Important Note: Make sure to edit both gitlab.yml and puma.rb to match your setup.
	#Note: If you want to use HTTPS, see Using HTTPS for the additional steps.

	#Configure GitLab DB Settings
	# Remote PostgreSQL only:
	# Update username/password in config/database.yml.
	# You only need to adapt the production settings (first part).
	# If you followed the database guide then please do as follows:
	# Change 'secure password' with the value you have given to $password
	# You can keep the double quotes around the password
	#vi config/database.yml

	# Initialize Database and Activate Advanced Features
	# Note: You can set the Administrator/root password by supplying it in environmental variable GITLAB_ROOT_PASSWORD as seen below. If you don't set the password (and it is set to the default one) please wait with exposing GitLab to the public internet until the installation is done and you've logged into the server the first time. During the first login you'll be forced to change the default password.

	if [ ${IS_UPGRADE} -eq 0 ]; then
		jexec <<EOF
# gitlab need write access to create a symlink
chown git /usr/local/share/gitlab-shell
yes yes | su -l git -c "cd /usr/local/www/gitlab-ce && rake gitlab:setup DISABLE_DATABASE_ENVIRONMENT_CHECK=1 RAILS_ENV=production GITLAB_ROOT_PASSWORD=\"${GITLAB_ROOT_PASSWORD}\""
# Make sure we undo the temporary permission fix again
chown root /usr/local/share/gitlab-shell
EOF
	else
		# upgrade/migration
		${ECHO} "${N1_COLOR}Rake db:migrate...${N0_COLOR}"
		jexec <<EOF
# gitlab need write access to create a symlink
chown git /usr/local/share/gitlab-shell
su -l git -c "cd /usr/local/www/gitlab-ce && rake db:migrate RAILS_ENV=production"
su -l git -c "cd /usr/local/www/gitlab-ce && rake cache:clear RAILS_ENV=production"
# Make sure we undo the temporary permission fix again
chown root /usr/local/share/gitlab-shell
EOF
	fi


	#Secure secrets.yml
	#The secrets.yml file stores encryption keys for sessions and secure variables.
	#Backup secrets.yml someplace safe, but don't store it in the same place as your database backups.
	#Otherwise your secrets are exposed if one of your backups is compromised.

	#Check Application Status
	#Check if GitLab and its environment are configured correctly:

	jexec <<EOF
su -l git -c "cd /usr/local/www/gitlab-ce && rake gitlab:env:info RAILS_ENV=production"
EOF

	# Compile Assets
	jexec <<EOF
su -l git -c "cd /usr/local/www/gitlab-ce && yarn install --production --pure-lockfile"
su -l git -c "cd /usr/local/www/gitlab-ce && RAILS_ENV=production NODE_ENV=production USE_DB=false SKIP_STORAGE_VALIDATION=true NODE_OPTIONS='--max_old_space_size=3584' bundle exec rake gitlab:assets:compile"
EOF

	if [ ${IS_UPGRADE} -eq 0 ]; then
		#Remove Superuser rights from database user
		jexec <<EOF
psql -d template1 -U postgres -c "ALTER USER git WITH NOSUPERUSER;"
EOF
	fi

	#
	#Start Your GitLab Instance
	jexec <<EOF
service gitlab restart
echo "waiting for gitlab services..."
sleep 10
EOF

	# use this command as root user to start gitlab:
	#service gitlab start
	# or this:
	#/usr/local/etc/rc.d/gitlab restart
	set +o xtrace
}

configure_nginx()
{
	# re-init listen-http/listen-https include config files by set_nginx_listen.sh hooks
	${workdir}/jails-system/${jname}/master_poststart.d/set_nginx_listen.sh

	jexec <<EOF
cp -a /usr/local/www/gitlab-ce/lib/support/nginx/gitlab /usr/local/www/gitlab-ce/lib/support/nginx/gitlab.bak
# We can concat in one sed but then it is more difficult to understand which replacement is the error
sed -i '' -e "s#^.*listen \\\[::\\\].*#  include /usr/local/etc/nginx/listen-http.conf;#g" /usr/local/www/gitlab-ce/lib/support/nginx/gitlab
sed -i '' -e "s#^.*listen 0.0.0.0:80.*#  include /usr/local/etc/nginx/listen-https.conf;#g" /usr/local/www/gitlab-ce/lib/support/nginx/gitlab
sed -i '' -e "s#YOUR_SERVER_FQDN#_#g" /usr/local/www/gitlab-ce/lib/support/nginx/gitlab

mkdir /var/log/nginx
nginx -t
service nginx restart
EOF
}

configure_ssh()
{

	[ "${GITLAB_SSH_PORT}" = "22" ] && return 0
	jexec <<EOF
su -l git -c "mkdir -m 0700 -p /usr/local/git/.ssh"
cat > /usr/local/git/.ssh/config <<JEOF
host ${host_hostname}
	user git
	port ${GITLAB_SSH_PORT}
	hostname 127.0.0.1
JEOF
chown git:git /usr/local/git/.ssh/config
${ECHO} "${N1_COLOR}non-standart ssh port saved in: ${N2_COLOR}/usr/local/git/.ssh/config${N0_COLOR}"
EOF

	##sed -i '' -e 's/^.*ssh_port: 22$/    ssh_port: 2223/g' /usr/local/www/gitlab-ce/config/gitlab.yml
}


postcreate_gitlab()
{
	local _ip

	set +o xtrace
	set +o errexit

	# ssh expose ?
	if [ ${GITLAB_SSH_EXPOSE} -ne 0 ]; then
		expose mode=add in=${GITLAB_SSH_EXPOSE} out=${GITLAB_SSH_PORT}
	fi
	if [ ${GITLAB_HTTP_EXPOSE} -ne 0 ]; then
		expose mode=add in=${GITLAB_HTTP_EXPOSE} out=${GITLAB_HTTP_PORT}
	fi
	if [ ${GITLAB_HTTPS_EXPOSE} -ne 0 ]; then
		expose mode=add in=${GITLAB_HTTPS_EXPOSE} out=${GITLAB_HTTPS_PORT}
	fi

	# cbsd sysrc
	sysrc \
		syslogd_flags="-ss" \
		sendmail_enable="NO" \
		sendmail_submit_enable="NO" \
		sendmail_outbound_enable="NO" \
		sendmail_msp_queue_enable="NO" \
		cron_enable="NO" \
		sshd_enable="YES" \
		sshd_flags="-oUseDNS=no -oPort=${GITLAB_SSH_PORT}" \
		gitlab_enable="YES" \
		postgresql_enable="YES" \
		nginx_enable="YES" \
		redis_enable="YES" \
		gitlab_ssh_port="${GITLAB_SSH_PORT}" \
		gitlab_http_port="${GITLAB_HTTP_PORT}" \
		gitlab_https_port="${GITLAB_HTTPS_PORT}"

	INIT_TIME=$( ${DATE_CMD} +%s )

	jexec <<EOF
# fix perms for skel files
chown root:wheel /etc/login.conf /etc/login.conf.db /etc/mail/aliases /etc/mail/aliases.db
service sshd restart
EOF

	configure_postgresql

	# tests:
	set +o xtrace
	set -o errexit
	tests/10_postgres_port.sh
	set +o errexit
	set -o xtrace

	configure_postgresql_cred

	# tests
	set +o xtrace
	set -o errexit
	tests/20_postgres_cred.sh
	set +o errexit
	set -o xtrace


	configure_redis

	# tests
	set +o xtrace
	set -o errexit
	tests/30_redis_process.sh
	tests/40_redis_sock.sh
	set +o errexit
	set -o xtrace

	configure_gitlab

	configure_nginx

	# tests
	set +o xtrace
	set -o errexit
	tests/50_nginx_process.sh
	tests/60_gitlab_status.sh
	tests/70_login.sh
	set +o errexit
	set -o xtrace

	configure_ssh

#	# Create .gitlab_shell_secret symlink
#	jexec ln -s /usr/local/www/gitlab-ce/.gitlab_shell_secret /usr/local/share/gitlab-shell/.gitlab_shell_secret


#	# Update config files
#	jexec <<EOF
## Replace host with our IP
##sed -i '' -e 's/^.*host: localhost$/    host: 192.168.0.251/g' /usr/local/www/gitlab-ce/config/gitlab.yml
#sed -i '' -e "s/^.*host: localhost$/    host: ${ip4_addr}/g" /usr/local/www/gitlab-ce/config/gitlab.yml
## Replace port for gitlab web interface
#sed -i '' -e 's/^.*port: 80 .*$/    port: 10080/g' /usr/local/www/gitlab-ce/config/gitlab.yml
## gitlab ssh config


	set +o xtrace
	# postmessage
	if [ -n "${ipv4_first}" ]; then
		${ECHO} "	GitLab URL	: http://${ipv4_first}:${GITLAB_HTTP_PORT}"
		[ "${GITLAB_HTTPS_PORT}" != "0" ] && ${ECHO} "	GitLab URL	: https://${ipv4_first}:${GITLAB_HTTPS_PORT}"
	fi
	if [ -n "${ipv6_first}" ]; then
		${ECHO} "	GitLab URL	: http://[${ipv6_first}]:${GITLAB_HTTP_PORT}"
		[ "${GITLAB_HTTPS_PORT}" != "0" ] && ${ECHO} "	GitLab URL	: https://[${ipv6_first}]:${GITLAB_HTTPS_PORT}"
	fi

	${CAT_CMD} <<EOF
	GitLab root login   : root
	GitLab root passowrd: "${GITLAB_ROOT_PASSWORD}"

	Hint:
	Enable cluster mode if you expect to have a high load instance
	Ex. change amount of workers to 3 for 2GB RAM server
	Set the number of workers to at least the number of cores:

	vi /usr/local/www/gitlab-ce/config/puma.rb
EOF

	if [ "${GITLAB_SSH_PORT}" != "22" ]; then
		${ECHO} "  ${N1_COLOR}hint: You may want to use the configuration for an alternative port${N0_COLOR}"
		${CAT_CMD} <<EOF
host ${host_hostname}
	user git
	port ${GITLAB_SSH_PORT}
EOF
	fi
}
